name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-backend:
    name: Test Rust Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check Rust code
      run: cargo check
    
    - name: Run Rust tests
      run: cargo test
    
    - name: Run Clippy
      run: cargo clippy -- -D warnings
    
    - name: Build Rust backend
      run: cargo build --release

  test-frontend:
    name: Test Next.js Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check TypeScript
      run: |
        cd frontend
        npx tsc --noEmit
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build backend
      run: cargo build --release
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Start backend
      run: |
        ./target/release/markdown-preview-backend &
        sleep 5
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:3001/health
        curl -f -X POST http://localhost:3001/api/convert \
          -H "Content-Type: application/json" \
          -d '{"content": "# Test", "theme": "light"}'

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: markdown-preview:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 